{"version":3,"sources":["pages/Register.js"],"names":["Register","styled","div","H2","h2","Rejister","tailLayout","wrapperCol","offset","span","AuthStore","useStores","history","useHistory","labelCol","name","initialValues","remember","onFinish","values","setUsername","username","setPassword","password","register","then","push","catch","err","message","error","console","log","onFinishFailed","errorInfo","Item","label","rules","required","validator","rule","value","test","Promise","reject","length","resolve","min","max","Password","getFieldValue","type","htmlType"],"mappings":"6hBAMA,IAAMA,EAAWC,IAAOC,IAAV,KAORC,EAAKF,IAAOG,GAAV,KAqHOC,UA/GE,WACf,IAQMC,EAAa,CACjBC,WAAY,CACVC,OAAQ,EACRC,KAAM,KAIFC,EAAcC,cAAdD,UACFE,EAAUC,cAqBd,OACE,kBAACb,EAAD,KACE,kBAACG,EAAD,qBACA,kBAAC,IAAD,iBAxCS,CACbW,SAAU,CACRL,KAAM,GAERF,WAAY,CACVE,KAAM,KAmCJ,CAEEM,KAAK,QACLC,cAAe,CACbC,UAAU,GAEZC,SA7BS,SAAAC,GACfT,EAAUU,YAAYD,EAAOE,UAC7BX,EAAUY,YAAYH,EAAOI,UAC7Bb,EAAUc,WAAWC,MAAK,WACxBb,EAAQc,KAAK,QACZC,OAAM,SAAAC,GACPC,IAAQC,MAAM,4BACdC,QAAQC,IAAIJ,OAuBRK,eAnBe,SAAAC,GACrBH,QAAQC,IAAI,UAAWE,MAqBnB,kBAAC,IAAKC,KAAN,CACEC,MAAM,qBACNrB,KAAK,WACLsB,MAAO,CACL,CACEC,UAAU,EACVT,QAAS,wCAEX,CAAEU,UA3Ba,SAACC,EAAMC,GAC9B,MAAG,KAAKC,KAAKD,GAAeE,QAAQC,OAAO,sEACxCH,EAAMI,OAAS,GAAKJ,EAAMI,OAAS,GAAYF,QAAQC,OAAO,4CAC1DD,QAAQG,cA2BT,kBAAC,IAAD,OAGF,kBAAC,IAAKX,KAAN,CACEC,MAAM,eACJrB,KAAK,WACLsB,MAAO,CACL,CACEC,UAAU,EACVT,QAAS,kCAEX,CAAEkB,IAAK,EAAGlB,QAAS,mCACnB,CAAEmB,IAAK,GAAInB,QAAS,sCAGtB,kBAAC,IAAMoB,SAAP,OAGF,kBAAC,IAAKd,KAAN,CACEC,MAAM,2BACNrB,KAAK,kBACLsB,MAAO,CACL,CACEC,UAAU,EACVT,QAAS,8CAEX,gBAAGqB,EAAH,EAAGA,cAAH,MAAwB,CACtBX,UADsB,SACZC,EAAMC,GACd,OAAKA,GAASS,EAAc,cAAgBT,EAGrCE,QAAQC,OAAO,8CAFbD,QAAQG,eAOvB,kBAAC,IAAMG,SAAP,OAGF,kBAAC,IAAKd,KAAS7B,EACb,kBAAC,IAAD,CAAQ6C,KAAK,UAAUC,SAAS,UAAhC","file":"static/js/12.f7b9634f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { useStores } from '../stores';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Register = styled.div`\r\n  margin: 50px auto;\r\n  padding: 30px 20px;\r\n  max-width: 600px;\r\n  border-radius: 6px;\r\n  box-shadow: 1px 0 2px 0 rgba(0, 0, 0, 0.5)\r\n`;\r\nconst H2 = styled.h2`\r\n  padding: 15px 0;\r\n  text-align: center;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst Rejister = () => {\r\n  const layout = {\r\n    labelCol: {\r\n      span: 6,\r\n    },\r\n    wrapperCol: {\r\n      span: 18,\r\n    },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 6,\r\n      span: 18,\r\n    },\r\n  };\r\n  \r\n  const { AuthStore } = useStores();\r\n  const history = useHistory();\r\n  const onFinish = values => {\r\n    AuthStore.setUsername(values.username);\r\n    AuthStore.setPassword(values.password);\r\n    AuthStore.register().then(() => {\r\n      history.push('/')\r\n    }).catch(err => {\r\n      message.error('注册失败')\r\n      console.log(err)\r\n    }); \r\n  };\r\n\r\n  const onFinishFailed = errorInfo => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  const validateUsername = (rule, value)=> {\r\n    if(/\\W/.test(value)) return Promise.reject('只能是字母数字和下划线');\r\n    if(value.length < 4 || value.length > 10 ) return Promise.reject('长度为4-10个字符');\r\n    return Promise.resolve();\r\n  }\r\n\r\n    return (\r\n      <Register>\r\n        <H2>注册</H2>\r\n        <Form\r\n          {...layout}\r\n          name=\"basic\"\r\n          initialValues={{\r\n            remember: true,\r\n          }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n        \r\n        <Form.Item\r\n          label=\"用户名\"\r\n          name=\"username\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: '请输入用户名',\r\n            },\r\n            { validator: validateUsername}\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n  \r\n        <Form.Item\r\n          label=\"密码\"\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '请输入密码',\r\n              },\r\n              { min: 4, message: '最小4个字符' },\r\n              { max: 10, message: '最多10个字符'}\r\n            ]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"确认密码\"\r\n            name=\"confirmPassword\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '请再次输入密码',\r\n              },\r\n              ({ getFieldValue }) => ({\r\n                validator(rule, value) {\r\n                  if (!value || getFieldValue('password') === value) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  return Promise.reject('两次密码不一致');\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item>\r\n    \r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              提交\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Register>\r\n    );\r\n  };  \r\n\r\nexport default Rejister;"],"sourceRoot":""}