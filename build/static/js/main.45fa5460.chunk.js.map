{"version":3,"sources":["components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js","models/index.js","stores/User.js","stores/Image.js","stores/History.js","stores/Auth.js","stores/index.js"],"names":["Header","styled","header","StyledLink","NavLink","H1","h1","P","p","Nav","nav","StyledButton","Button","Component","observer","useStores","UserStore","AuthStore","history","useHistory","to","exact","currentUser","attributes","username","type","onClick","logout","push","Footer","footer","Home","lazy","History","About","Login","Register","Upload","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","Helmet","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","reslove","reject","signUp","loginedUser","log","resolve","logIn","logOut","current","Image","add","file","filename","item","Object","avFile","File","set","save","serverFile","find","page","limit","query","Query","include","skip","equalTo","result","err","this","observable","action","newFile","newFilename","isUploading","id","createAt","finally","newList","list","concat","hasMore","append","length","values","pullUser","resetUser","ImageStore","reset","HistoryStory","context","createContext","HistoryStore","Window","stores","useContext"],"mappings":"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","file":"static/js/main.45fa5460.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Button } from 'antd';\r\nimport { useStores } from '../stores';\r\nimport { observer } from 'mobx-react';\r\n\r\n\r\nconst Header = styled.header`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  background-color: #ddd;\r\n`;\r\nconst StyledLink = styled(NavLink)`\r\n  margin-left: 25px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  color: #444;\r\n \r\n  &.active {\r\n    border-bottom: 1px solid #444;\r\n  }\r\n`;\r\nconst H1 = styled.h1`\r\n  margin: 0 auto; \r\n  color: #444;\r\n`;\r\n  const P=styled.p`\r\n  margin: 10px 0;\r\n  padding-right: 10px;\r\n  font-size: 30px;\r\n  font-family: iconfont;\r\n  cursor: pointer;\r\n  `;\r\nconst Nav = styled.nav`\r\n  margin-right: 20px;\r\n  margin-left: auto;\r\n`;\r\nconst StyledButton = styled(Button)`\r\n  margin-left: 15px;\r\n`\r\nconst Component = observer(() => {\r\n  const { UserStore, AuthStore } = useStores()\r\n  const history = useHistory();\r\n  const handleLogin= ()=> {\r\n    history.push(\"/login\");\r\n  }\r\n   const handleLogout = () =>{\r\n    AuthStore.logout();\r\n   }\r\n  const handleRegister = () =>{\r\n    history.push(\"/register\");\r\n  }\r\n  \r\n  return (\r\n    <Header>\r\n      <StyledLink to='/' exact>首页</StyledLink>\r\n      <StyledLink to='/upload'>上传图片</StyledLink>\r\n      <StyledLink to='/history'>上传历史</StyledLink>\r\n      <StyledLink to='/about'>关于我</StyledLink>\r\n      <H1>My Picture</H1>\r\n      <Nav>\r\n        <P>&#xe61b;</P> \r\n      </Nav>\r\n      <div>\r\n        {UserStore.currentUser ? <>\r\n        {UserStore.currentUser.attributes.username} <StyledButton type=\"primary\" onClick={handleLogout}>注销</StyledButton>\r\n        </> : <><StyledButton type=\"primary\" onClick={handleLogin}>登录</StyledButton>\r\n        <StyledButton type=\"primary\" onClick={handleRegister}>注册</StyledButton></>}\r\n      </div>\r\n    </Header>\r\n  )\r\n})\r\n\r\nexport default Component;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Footer = styled.footer`\r\n  padding: 5px 100px;\r\n  margin: 0;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  color: #bfb2a7;\r\n`;\r\n\r\n\r\nconst Component = () => {\r\n  return (\r\n    <Footer>\r\n      <p>My Picture 记录你的每一次改变</p>\r\n    </Footer>\r\n  )\r\n}\r\n\r\nexport default Component;","import React, {lazy, Suspense} from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport {\n  Switch,\n  Route\n} from 'react-router-dom';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst History = lazy(() => import('./pages/History'));\nconst About = lazy(() => import('./pages/About'));\nconst Login = lazy(() => import('./pages/Login'));\nconst Register = lazy(() => import('./pages/Register'));\nconst Upload = lazy(() => import('./pages/Upload'));\n\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Suspense fallback={<div>Loading!!</div>}>\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/upload' exact component={Upload} />\n            <Route path='/about' component={About} />\n            <Route path='/history' component={History} />\n            <Route path='/login' component={Login} />\n            <Route path='/register' component={Register} />\n          </Switch>\n        </Suspense> \n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  HashRouter as Router\n} from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\n\nReactDOM.render(  \n    <Router>\n      <Helmet>\n        <title>My Picture</title>\n      </Helmet>\n      <App />\n    </Router>\n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import AV, { User } from 'leancloud-storage';\r\n\r\n\r\nAV.init({\r\n  appId: \"o3xTmjdOxCnGbv1wtQMfYAqb-gzGzoHsz\",\r\n  appKey: \"gKpmEbU2uP9fkKwRvahVtbiR\",\r\n  serverURL: \"https://o3xtmjdo.lc-cn-n1-shared.com\"\r\n});\r\n\r\n\r\nconst Auth = {\r\n  register(username, password) {\r\n    const user = new User();\r\n    user.setUsername(username);\r\n    user.setPassword(password);\r\n    return new Promise((reslove, reject) =>{\r\n      user.signUp().then(loginedUser => {\r\n        console.log(`注册成功`);\r\n        reslove(loginedUser);\r\n      }, error=> {\r\n        reject(error)\r\n      });\r\n    });\r\n  },\r\n\r\n  login(username, password) {\r\n    return new Promise((resolve, reject) => {\r\n      User.logIn(username, password).then(loginedUser=>resolve(loginedUser),error=> reject(error));\r\n    });\r\n  },\r\n\r\n  logout() {\r\n    User.logOut();\r\n  },\r\n\r\n  getCurrentUser() {\r\n    return User.current()\r\n  }\r\n\r\n}\r\n\r\nconst Image = {\r\n  add(file, filename) {\r\n    const item = new AV.Object('Image');\r\n    const avFile = new AV.File(filename,file);\r\n    item.set('filename', filename)\r\n    item.set('owner', User.current())\r\n    item.set('url', avFile);\r\n    return new Promise((resolve,reject) => {\r\n      item.save().then(serverFile => resolve(serverFile), error => reject(error));\r\n    });\r\n  },\r\n  \r\n  find({page=0, limit=10}){\r\n    const query = new AV.Query('Image');\r\n    query.include('owner')\r\n    query.limit(limit);\r\n    query.skip(page*limit);\r\n    query.equalTo('owner', User.current());\r\n    return new Promise((resolve, reject) => {\r\n      query.find().then(result=> resolve(result)).catch(err=> reject(err))\r\n    })\r\n  },\r\n\r\n  \r\n}\r\n\r\nwindow.Image = Image\r\nexport {\r\n  Auth,\r\n  Image\r\n}","import { observable, action} from 'mobx';\r\nimport { Auth } from '../models';\r\n\r\nclass UserStore {\r\n @observable currentUser=null;\r\n\r\n @action pullUser() {\r\n  this.currentUser = Auth.getCurrentUser();\r\n}\r\n\r\n@action resetUser() {\r\n  this.currentUser = null;\r\n}\r\n\r\n}\r\n\r\nexport default new UserStore();","import { observable, action} from 'mobx';\r\nimport { Image } from '../models';\r\nimport { message } from 'antd';\r\n\r\nclass ImageStore{\r\n  @observable file = null;\r\n  @observable filename = \"\";\r\n  @observable serverFile = null;\r\n  @observable isUploading = false;\r\n  @observable id = '';\r\n\r\n  @action setFile(newFile) {\r\n    this.file = newFile\r\n  };\r\n\r\n  @action setFilename(newFilename) {\r\n    this.filename = newFilename\r\n  };\r\n \r\n  @action upload() {\r\n    this.serverFile = null;\r\n    this.isUploading = true;\r\n    return new Promise((reslove,reject)=> {\r\n      Image.add(this.file,this.filename).then(serverFile => {\r\n        console.log('上传成功');\r\n        this.serverFile = serverFile;\r\n        this.id = serverFile.createAt.id\r\n        reslove(serverFile)\r\n      }).catch(err=> {\r\n        message.error('上传失败')\r\n        reject(err)\r\n      }).finally(() => this.isUploading = false)\r\n    })\r\n  };\r\n\r\n  @action reset() {\r\n    this.serverFile = null;\r\n    this.isUploading = false;\r\n  }\r\n  \r\n}\r\n\r\nexport default new ImageStore()\r\n","import { observable, action } from 'mobx';\r\nimport { Image } from '../models';\r\n\r\nclass HistoryStore{\r\n  @observable page = 0;\r\n  @observable hasMore = true;\r\n  @observable list = [];\r\n  limit = 10;\r\n\r\n  @action append(newList){\r\n    this.list = this.list.concat(newList)\r\n  }\r\n\r\n  @action find(){\r\n    this.hasMore = true;\r\n      Image.find({page:this.page, limit:this.limit}).then(newList => {\r\n        this.append(newList);\r\n        this.page++;   \r\n        if(newList.length < this.limit) {\r\n          this.hasMore = false\r\n        }\r\n      }).catch(err => console.log(err))\r\n  }\r\n\r\n  @action reset() {\r\n    this.page = 0;\r\n    this.list = [];\r\n    this.hasMore = true;\r\n  }\r\n}\r\n\r\nexport default new HistoryStore();","import { observable, action} from 'mobx';\r\nimport { Auth } from '../models';\r\nimport UserStore from './User';\r\nimport ImageStore from './Image';\r\nimport { message } from 'antd';\r\nimport HistoryStory from './History';\r\n\r\nclass AuthStore{\r\n  @observable values = {\r\n    username: '',\r\n    password: ''\r\n  };\r\n \r\n  @action setUsername(username) {\r\n    this.values.username = username\r\n  }\r\n\r\n  @action setPassword(password) {\r\n    this.values.password = password\r\n  }\r\n\r\n  @action register() {\r\n    return new Promise((resolve, reject) => {\r\n      Auth.register(this.values.username, this.values.password).then(user =>{\r\n        console.log('注册成功')\r\n        resolve(user)\r\n      }).catch(err=>{\r\n        message.error('注册失败')\r\n        reject(err)\r\n       });\r\n    })\r\n  }\r\n  @action login(){\r\n    return new Promise((resolve, reject) =>{\r\n      Auth.login(this.values.username, this.values.password).then(user=>{\r\n        UserStore.pullUser();\r\n        resolve(user);\r\n      }).catch(err=>{\r\n        UserStore.resetUser();\r\n        reject(err);\r\n      })\r\n    });\r\n  };\r\n\r\n  @action logout() {\r\n    Auth.logout();\r\n    UserStore.resetUser();\r\n    ImageStore.reset();\r\n    HistoryStory.reset();\r\n  }\r\n}\r\n\r\nexport default new AuthStore()\r\n","import AuthStore from './Auth';\r\nimport { createContext, useContext } from 'react';\r\nimport UserStore from './User';\r\nimport ImageStore from './Image';\r\nimport HistoryStore from './History';\r\n\r\n\r\nconst context = createContext({\r\n  AuthStore,\r\n  UserStore,\r\n  ImageStore,\r\n  HistoryStore\r\n});\r\n\r\nWindow.stores = {\r\n  AuthStore,\r\n  UserStore,\r\n  ImageStore,\r\n  HistoryStore\r\n};\r\n\r\nexport const useStores = ()=>useContext(context);"],"sourceRoot":""}